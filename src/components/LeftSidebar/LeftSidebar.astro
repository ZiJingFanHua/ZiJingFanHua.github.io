---
import { getLanguageFromURL } from "../../languages";
import { SIDEBAR } from "../../consts";
import Icon from "../Icon.astro";
type Props = {
	currentPage: string;
};

const { currentPage } = Astro.props;
const currentPageMatch = currentPage.endsWith("/")
	? currentPage.slice(1, -1)
	: currentPage.slice(1);
const langCode = getLanguageFromURL(currentPage);
const sidebar = SIDEBAR[langCode];
let firstDetails = true;
---

<nav aria-labelledby="grid-left">
	<ul class="nav-groups">
		{
			Object.entries(sidebar).map(([header, children]) => (
				<li>
					<details class="nav-group" id="first-details" open="true">
						<summary>
							<h2 class="title-2">{header}</h2>
							<span class="right-icon">
								<Icon icon="right" size="1.0em" />
							</span>
							<span class="down-icon">
								<Icon icon="down" size="1.0em" />
							</span>
						</summary>
						<ul>
							{children.map((child) => {
								const url = Astro.site?.pathname + child.link;
								if (child.type != "month") {
									return (
										<li
											class="header-link nav-link"
											aria-current={
												currentPageMatch === child.link ? "page" : false
											}
										>
											<a
												href={url}
												aria-current={
													currentPageMatch === child.link ? "page" : false
												}
											>
												{child.text}
											</a>
										</li>
									);
								} else {
									return <li class="month-title">{child.text}</li>;
								}
							})}
						</ul>
					</details>
				</li>
			))
		}
	</ul>
</nav>

<script is:inline>
window.addEventListener("DOMContentLoaded", () => {
	var target = document.querySelector('[aria-current="page"]');
	if (target && target.offsetTop > window.innerHeight - 100) {
		document.querySelector(".nav-groups").scrollTop = target.offsetTop;
	}
});
</script>

<style>
	nav {
		width: 100%;
		margin-right: 1rem;
	}

	details > summary > .down-icon {
		display: none;
	}

	details[open] > summary > .down-icon {
		display: inline-block;
	}
	details[open] > summary > .right-icon {
		display: none;
	}

	.nav-title {
		display: flex;
		justify-content: space-between;
	}

	.nav-groups {
		height: 100%;
		padding: 2rem 0;
		overflow-x: visible;
		overflow-y: auto;
		max-height: 100vh;
	}

	.nav-groups > li + li {
		margin-top: 2rem;
	}

	.nav-groups > :first-child {
		/* padding-top: var(--doc-padding); */
	}

	.nav-groups > :last-child {
		padding-bottom: 2rem;
		margin-bottom: var(--theme-navbar-height);
	}

	.nav-group-title {
		font-size: 1rem;
		font-weight: 700;
		padding: 0.1rem 1rem;
		text-transform: uppercase;
		margin-bottom: 0.5rem;
	}
	.nav-link {
		padding-inline-start:0
	}
	.nav-link a {
		font-size: 1rem;
		margin: 1px;
		padding: 0.3rem 1rem;
		font: inherit;
		color: inherit;
		text-decoration: none !important;
		display: block;
	}
	.month-title {
		font-size: 1rem;
		margin: 1px;
		padding: 0.3rem 0;
		font: inherit;
		font-weight: 700;
		color: inherit;
		text-decoration: none;
		display: block;
	}
	.nav-link a:hover,
	.nav-link a:focus {
		background-color: var(--theme-bg-hover);
	}

	.nav-link a[aria-current="page"] {
		color: var(--theme-text-accent);
		/* background-color: var(--theme-bg-accent); */
		font-size: 1.2rem;
		font-weight: 600;
	}

	.nav-link[aria-current="page"] {
		/* border-left: 2px solid #c35d5d; */
	}
	.nav-title-two {
		display: flex;
		justify-content: space-between;
	}
	.title-2 {
		font-size: 24px;
	}

	@media (min-width: 50em) {
		.nav-groups {
			padding: 0;
		}
	}

	summary {
		height: 30px;
		display: flex;
		justify-content: space-between;
		padding-right: 20px;
	}
</style>

<style is:global>
	:root.theme-dark .nav-link a[aria-current="page"] {
		color: hsla(var(--color-base-white), 100%, 1);
	}
</style>
