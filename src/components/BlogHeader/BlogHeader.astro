---
import { getLanguageFromURL, KNOWN_LANGUAGE_CODES } from "../../languages";
import { SITE } from "../../consts";
import Logo from "../BlogLogo/Logo.astro";
import ThemeToggleBtn from "../ThemeToggle.astro";
import Search from "./Search";
import Icon, { Props as IconProps } from "../Icon.astro";
import "../../styles/global.css";
type Props = {
  currentPage: string;
};

const { currentPage } = Astro.props;
const lang = getLanguageFromURL(currentPage);

// 外部链接
const iconLinks: { label: string; href: string; icon: IconProps["icon"] }[] = [
  // { label: "Twitter", href: "https://twitter.com/me", icon: "twitter-logo" },
  // { label: "Twitch", href: "https://twitch.tv/me", icon: "twitch-logo" },
  // { label: "GitHub", href: "https://github.com/me", icon: "github-logo" },
  // { label: "CodePen", href: "https://codepen.io/me", icon: "codepen-logo" },
  // { label: "dribbble", href: "https://dribbble.com/me", icon: "dribbble-logo" },
  // {
  // 	label: "YouTube",
  // 	href: "https://www.youtube.com/@me/",
  // 	icon: "youtube-logo",
  // },
  {
    label: "Gitee",
    href: "https://gitee.com/zijingfanhuha",
    icon: "gitee-logo",
  },
  {
    label: "GitHub",
    href: "https://github.com/ZiJingFanHua",
    icon: "github-logo",
  },
];

//内部链接
const textLinks: { label: string; href: string }[] = [
  { label: "首页", href: "/" },
  { label: "博客", href: "/" },
  { label: "笔记", href: "/" },
  { label: "措施", href: "/" },
  { label: "随笔", href: "/" },
];
---

<header>
  <nav class="nav-wrapper" title="ZiJing">
    <div class="logo flex">
      <a href="/">
        <Logo size={40} />
        <h1>{SITE.title ?? "Documentation"}</h1>
      </a>
    </div>
    <div class="search-item">
      <Search client:idle />
    </div>
    <div class="nav-title">
      <ul class="nav-items">
        {
          textLinks.map(({ label, href }) => (
            <li>
              <a
                aria-current={Astro.url.pathname === href}
                class:list={[
                  "link",
                  {
                    active:
                      Astro.url.pathname === href ||
                      (href !== "/" && Astro.url.pathname.startsWith(href)),
                  },
                ]}
                href={href}
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
    <div class="nav-right">
      <div class="theme right-item">
        <ThemeToggleBtn client:visible />
      </div>
      <div class="menu-footer right-item">
        <div class="socials">
          {
            iconLinks.map(({ href, icon, label }) => (
              <a href={href} class="social">
                <span class="sr-only">{label}</span>
                <Icon icon={icon} />
              </a>
            ))
          }
        </div>
      </div>
    </div>
  </nav>
</header>

<style>
  header {
    z-index: 11;
    height: var(--theme-navbar-height);
    width: 100%;
    background-color: var(--theme-navbar-bg);
    position: sticky;
    top: 0;
  }

  header::after {
    margin-top: 24px;
    display: block;
    width: 100%;
    height: 32px;
    background: linear-gradient(white, transparent 70%);
    content: "";
  }

  .logo {
    display: flex;
    /* overflow: hidden; */
    font-size: 2rem;
    flex-shrink: 0;
    font-weight: 600;
    line-height: 1;
    color: hsla(var(--color-base-white), 100%, 1);
    gap: 0.25em;
    z-index: -1;
  }

  .logo a {
    display: flex;
    padding: 0.5em 0.25em;
    margin: -0.5em -0.25em;
    text-decoration: none;
    font-weight: bold;
  }

  .logo a {
    transition: color 100ms ease-out;
    color: var(--theme-text);
  }

  .logo a:hover,
  .logo a:focus {
    color: var(--theme-text-accent);
  }

  .logo h1 {
    display: none;
    font: inherit;
    color: inherit;
    margin: 0;
  }

  .nav-wrapper {
    display: grid;
    grid-column-gap: 50px;
    grid-template-columns: 260px auto 600px 250px;
    width: 100%;
    padding: 0 1rem;
  }

  @media (min-width: 50em) {
    header {
      /* position: static; */
      padding: 2rem;
      /* margin-bottom: 24px; */
    }

    .logo {
      width: auto;
      margin: 0;
      z-index: 0;
    }

    .logo h1 {
      display: initial;
    }

    .menu-toggle {
      display: none;
    }
  }

  /** Style Algolia */
  :root {
    --docsearch-primary-color: var(--theme-accent);
    --docsearch-logo-color: var(--theme-text);
  }

  .search-item {
    display: none;
    position: relative;
    z-index: 10;
    flex-grow: 1;
    padding-right: 0.7rem;
    display: flex;
    max-width: 200px;
  }

  @media (min-width: 50em) {
    .search-item {
      max-width: 400px;
    }
  }

  .nav-right {
    display: flex;
    justify-content: left;
  }
  .right-item {
    margin: 0 20px;
    display: flex;
    align-items: center;
  }
  .nav-title {
    display: flex;
    justify-content: right;
  }
  .nav-items {
    margin: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    gap: 1rem;
    font-size: var(--text-base);
    /* line-height: 1.2; */
    list-style: none;
    padding: 2rem;
    background-color: var(--gray-999);
    border-bottom: 1px solid var(--gray-800);
  }

  .socials {
    display: flex;
    margin-top: 10px;
    flex-wrap: wrap;
    gap: 0.625rem;
    font-size: var(--icon-size);
  }

  .menu-footer {
    --icon-size: var(--text-xl);
    --icon-padding: 0.5rem;
    margin-top: -10px;
    display: flex;
    justify-content: space-between;
    gap: 0.75rem;
    padding: 1.5rem 2rem 1.5rem 1.5rem;
    background-color: var(--gray-999);
    border-radius: 0 0 0.75rem 0.75rem;
    box-shadow: var(--shadow-lg);
  }

  .menu-footer {
    --icon-padding: 0.375rem;

    justify-self: flex-end;
    align-items: center;
    padding: 0;
    background-color: transparent;
    box-shadow: none;
  }

  .social {
    display: flex;
    padding: var(--icon-padding);
    text-decoration: none;
    color: var(--accent-dark);
    transition: color var(--theme-transition);
  }

  .social:hover,
  .social:focus {
    color: var(--accent-text-over);
  }

  @media (min-width: 50em) {
    .nav-items {
      position: relative;
      flex-direction: row;
      font-size: var(--text-base);
      border-radius: 999rem;
      border: 0;
      width: 20rem;
      padding: 0.5rem 0.5625rem;
      background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
      box-shadow: var(--shadow-md);
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: "";
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    }
  }

  @media (min-width: 60em) {
    .socials {
      display: flex;
      justify-content: flex-end;
      gap: 0;
    }
  }
</style>

<style is:global>
  .search-item > * {
    flex-grow: 1;
  }
</style>
